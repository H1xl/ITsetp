@page "/Auth"

@inject HttpClient http
@inject NavigationManager manager
@inject LocalStorage session
@rendermode RenderMode.InteractiveServer
@using ITstep.Domen.Models
@using Microsoft.AspNetCore.Mvc

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h1>Авторизация</h1>
                </div>
                <div class="card-body">
                    <EditForm class="form-control" EditContext="model" OnSubmit="Submit" FormName="uniq">
                        <div class="form-group">
                            <label for="Login">Придумайте логин:</label>
                            <InputText id="Login" @bind-Value="user.Login" class="form-control valid" />
                        </div>
                        <div class="form-group">
                            <label for="Password">Придумайте пароль:</label>
                            <input id="Password" type="password" @bind-value="user.Password" class="form-control valid" />
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Авторизироваться</button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public User user = new();
    EditContext model;

    protected override async Task OnInitializedAsync()
    {
        model = new(user);
    }

    [IgnoreAntiforgeryToken]
    public async Task Submit()
    {
        //var response = await http.PostAsJsonAsync($"http://10.77.37.31:5079/api/Users", user);
        user = await http.GetFromJsonAsync<User>($"http://192.168.1.68:5079/api/Users/Auth?login={user.Login}&password={user.Password}");
        if (user.Id != 0)
        {
            session.sessinId = user.Id;
            manager.NavigateTo("/");
        }
        else
        {
            // Обработка ошибки, например, вывод сообщения об ошибке
            //var errorContent = await user.Content.ReadAsStringAsync();
            //Console.WriteLine($"Error: {errorContent}");
        }
    }
}
