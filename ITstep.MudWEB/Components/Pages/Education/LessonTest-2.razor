@inject ISnackbar SnackbarService
@inject LocalStorage session
@inject HttpClient http

<MudDialog>
	<DialogContent>
		<MudProgressLinear Color="Color.Tertiary" Buffer="true" Value="@ProgressBarValue" Class="my-7" />

		<MudText>
			@switch (questionNumber)
			{
				case 1:
					<Paragraph>Какое сочетание клавиш для блокировки компьютера?</Paragraph>
					<MudSelect T="string" Label="Клавиша 1" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

					</MudSelect>
					<MudSelect T="string" Label="Клавиша 2" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

					</MudSelect>
					break;
				case 2:
					<Paragraph>Сколько яблок весит синий ёжик на луне в среду<MudLink OnClick="Hint">?</MudLink></Paragraph>
					<MudItem md="4">
						<MudField Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AutoFixHigh" @bind-Value="answer3" />
					</MudItem>
					
					break;
				case 3:
					<Paragraph>Какие ценности компании?</Paragraph>
					break;
				case 4:
					<MudContainer Class="d-flex justify-center align-center">
						<MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Medium" Class="mt-auto"/>
					</MudContainer>
					break;
			}
		</MudText>
	</DialogContent>
	<DialogActions>
		@if (questionNumber == 3)
		{
			<MudButton Variant="Variant.Filled"
					   Color="Color.Primary"
					   EndIcon="@Icons.Material.Filled.SafetyCheck"
					   OnClick="Close">
				Завершить
			</MudButton>
		}
		else
		{
			<MudButton Variant="Variant.Filled"
					   EndIcon="@Icons.Material.Filled.ArrowForwardIos"
					   Color="Color.Primary"
					   OnClick="Start">
				Далее
			</MudButton>
		}
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	private int questionNumber = 1;
	private int ProgressBarValue { get; set; }

	private List<string> answer1 = new List<string> { "Win", "Ctrl", "Alt" };
	private List<string> answer2 = new List<string> { "Tab", "L", "C"};
	private string answer3;

	protected override async Task OnInitializedAsync()
	{
		SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

		await base.OnInitializedAsync();
		await SimulateProgressAsync();
	}

	public async Task SimulateProgressAsync()
	{
		ProgressBarValue = ((questionNumber - 1) * 33) + 1;
		StateHasChanged();
		await Task.Delay(200);
		await SimulateProgressAsync();
	}

	private void Start()
	{
		switch (questionNumber)
		{
			case 1:

			case 2:

				if (answer3 == "12")
				{
					SnackbarService.Add("Неправильно!", Severity.Error);
				} else
				{
					SnackbarService.Add("Хорошо!", Severity.Success);
				}
				break;
			case 3:

				break;
		}
		questionNumber++;
	}

	private void Hint()
	{
		SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
		SnackbarService.Add("Ответ 12 :)", Severity.Info);
	}

	private async Task Close(){
		Start();

		if (session.sessinUser.IsPassed == false)
		{

		}
		// Добавить отправку на API

		await Task.Delay(2500);
		MudDialog.Close(DialogResult.Ok(true));
	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		// dropItem.Item.Selector = dropItem.DropzoneIdentifier;
	}

	private List<DropItem> _items = new()
	{
		new DropItem(){ Name = "Наш коллектив — одна команда.", Selector = "1" },
		new DropItem(){ Name = "Работники компании – главная ценность", Selector = "1" },
		new DropItem(){ Name = "Для нас не каждая задача выполнима", Selector = "1" },
		new DropItem(){ Name = "Руководство открыто к диалогу", Selector = "1" },
		new DropItem(){ Name = "Необходим большой опыт для начала карьеры", Selector = "1" },
	};

	public class DropItem
	{
		public string Name { get; init; }
		public string Selector { get; set; }
	}
}
