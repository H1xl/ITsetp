@inject ISnackbar SnackbarService

<MudDialog>
	<DialogContent>
		<MudProgressLinear Color="Color.Tertiary" Buffer="true" Value="@ProgressBarValue" Class="my-7" />

		<MudText>
			@switch (questionNumber)
			{
				case 1:
					<Paragraph>Где находится головной офис Стилсофт?</Paragraph>
					<MudRadioGroup @bind-Value="radio" Class="flex-column">
						<MudRadio Value="1" Color="Color.Primary">Невиномысск</MudRadio>
						<MudRadio Value="2" Color="Color.Primary">Ставрополь</MudRadio>
						<MudRadio Value="3" Color="Color.Primary">Москва</MudRadio>
					</MudRadioGroup>
					break;
				case 2:
					<Paragraph>Выберите верные утверждения:</Paragraph>

					<MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
						<ChildContent>
								<MudPaper Class="ma-4 flex-grow-1">
									<MudList Clickable="true" Class="d-flex flex-column mud-height-full">
										<MudListSubheader>Все утверждения</MudListSubheader>
										<MudDropZone T="DropItem" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
									</MudList>
								</MudPaper>
								<MudPaper Class="ma-4 flex-grow-1">
									<MudList Clickable="true" Class="d-flex flex-column mud-height-full">
										<MudListSubheader>Верные утверждения</MudListSubheader>
										<MudDropZone T="DropItem" Identifier="2" Class="flex-grow-1" AllowReorder="true" />
									</MudList>
								</MudPaper>
						</ChildContent>
						<ItemRenderer>
							<MudListItem Text="@context.Name" />
						</ItemRenderer>
					</MudDropContainer>
					break;
				case 3:
					<Paragraph>Какие ценности компании?</Paragraph>
					<MudCheckBox @bind-Value="check[0]" Color="Color.Primary">Вера в успех</MudCheckBox>
					<MudCheckBox @bind-Value="check[1]" Color="Color.Primary">Ответственность</MudCheckBox>
					<MudCheckBox @bind-Value="check[2]" Color="Color.Primary">Наши сотрудники</MudCheckBox>
					<MudCheckBox @bind-Value="check[3]" Color="Color.Primary">Честность</MudCheckBox>
					<MudCheckBox @bind-Value="check[4]" Color="Color.Primary">Свобода и развитие</MudCheckBox>
					break;
				case 4:
					<MudContainer Class="d-flex justify-center align-center">
						<MudProgressCircular Color="Color.Info" Indeterminate="true" Size="Size.Medium" Class="mt-auto"/>
					</MudContainer>
					break;
			}
		</MudText>
	</DialogContent>
	<DialogActions>
		@if (questionNumber == 3)
		{
			<MudButton Variant="Variant.Filled"
					   Color="Color.Primary"
					   EndIcon="@Icons.Material.Filled.SafetyCheck"
					   OnClick="Close">
				Завершить
			</MudButton>
		}
		else
		{
			<MudButton Variant="Variant.Filled"
					   EndIcon="@Icons.Material.Filled.ArrowForwardIos"
					   Color="Color.Primary"
					   OnClick="Start">
				Далее
			</MudButton>
		}
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	private int questionNumber = 1;
	private int ProgressBarValue { get; set; }
	private bool _processing = false;

	private int radio { get; set; } = 0;
	private List<bool> check = new List<bool> { false, false, false, false, false };

	protected override async Task OnInitializedAsync()
	{
		SnackbarService.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

		await base.OnInitializedAsync();
		await SimulateProgressAsync();
	}

	public async Task SimulateProgressAsync()
	{
		ProgressBarValue = ((questionNumber - 1) * 33) + 1;
		StateHasChanged();
		await Task.Delay(200);
		await SimulateProgressAsync();
	}

	private void Start()
	{
		switch (questionNumber)
		{
			case 1:
				if (radio != 2)
				{					
					SnackbarService.Add("Неверно!", Severity.Error);
				} else
				{
					SnackbarService.Add("Отлично!", Severity.Success);
				}
				break;
			case 2:
				if (_items[0].Selector != "2" && _items[1].Selector != "2" && _items[3].Selector != "2")
				{
					SnackbarService.Add("Неправильно!", Severity.Error);
				} else
				{
					SnackbarService.Add("Хорошо!", Severity.Success);
				}
				break;
			case 3:
				if (check.All<bool>(x => x == false))
				{
					SnackbarService.Add("Вы читали урок?", Severity.Error);
				}
				else
				{
					SnackbarService.Add("Прекрасно!", Severity.Success);
				}
				break;
		}
		questionNumber++;
	}

	
	private async Task Close(){
		Start();

		// Добавить отправку на API

		await Task.Delay(2500);
		MudDialog.Close(DialogResult.Ok(true));
	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.Selector = dropItem.DropzoneIdentifier;
	}

	private List<DropItem> _items = new()
	{
		new DropItem(){ Name = "Наш коллектив — одна команда.", Selector = "1" },
		new DropItem(){ Name = "Работники компании – главная ценность", Selector = "1" },
		new DropItem(){ Name = "Для нас не каждая задача выполнима", Selector = "1" },
		new DropItem(){ Name = "Руководство открыто к диалогу", Selector = "1" },
		new DropItem(){ Name = "Необходим большой опыт для начала карьеры", Selector = "1" },
	};

	public class DropItem
	{
		public string Name { get; init; }
		public string Selector { get; set; }
	}
}
